<?php
/**
 * @package    {{ projectName }}
 * @subpackage {{ componentName }}
 * @version    {{ version }}
 *
 * @copyright  {{ copyright }}
 * @license    {{ license }}
 */

namespace {{ company_namespace }}\Component\{{ componentName }}\Administrator\Model;

defined('_JEXEC') or die;

use Joomla\CMS\Factory;
use Joomla\CMS\Language\Associations;
use Joomla\CMS\MVC\Model\AdminModel;
use Joomla\CMS\Language\LanguageHelper;
use Joomla\Database\ParameterType;
use Joomla\Utilities\ArrayHelper;
use Joomla\CMS\Helper\TagsHelper;

/**
 * Item Model for a {{ pageName }}.
 */
class {{ pageName }}Model extends AdminModel
{
	 /**
	 * The type alias for this content type.
	 *
	 * @var    string
	 */
	public $typeAlias = 'com_{{ componentName|lower }}.{{ pageName|lower }}';

	/**
	 * The context used for the associations table
	 *
	 * @var    string
	 */
	protected $associationsContext = 'com_{{ componentName|lower }}.item';

	/**
	 * Allowed batch commands
	 *
	 * @var  array
	 */

	protected $batch_commands = [
		'assetgroup_id' => 'batchAccess',
		'language_id'   => 'batchLanguage',
		'tag'           => 'batchTag',
		'user_id'       => 'batchUser'
	];


	/**
	 * Method to get the {{ pageName }} form.
	 *
	 * @param   array    $data      Data for the form.
	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.
	 *
	 * @return  \JForm|boolean  A \JForm object on success, false on failure
	 */
	public function getForm($data = [], $loadData = true)
	{
		// Get the form.
		$form = $this->loadForm($this->typeAlias, '{{ pageName|lower }}', ['control' => 'jform', 'load_data' => $loadData]);

		if (empty($form))
		{
			return false;
		}

		return $form;
	}

	/**
	 * Method to get the data that should be injected in the form.
	 *
	 * @return  mixed  The data for the form.
	 */
	protected function loadFormData()
	{
		$app = Factory::getApplication();

		// Check the session for previously entered form data.
		$data = $app->getUserState('com_{{ componentName|lower }}.edit.{{ pageName|lower }}.data', []);

		if (empty($data))
		{
			$data = $this->getItem();

			// Prime some default values. Todo: categories
			/*if ($this->getState('{{ pageName|lower }}.id') == 0)
			{
				$data->set('catid', $app->input->get('catid', $app->getUserState('com_{{ componentName|lower }}.{{ pageName|lower }}.filter.category_id'), 'int')); // todo: for categories the plural entityname or pagename (?) is used; 'foos' in examples
			}*/
		}

		//$this->preprocessData($this->typeAlias, $data);

		return $data;
	}

	/**
	 * Method to get a single record.
	 *
	 * @param   integer  $pk  The id of the primary key.
	 *
	 * @return  mixed  Object on success, false on failure.
	 */
	public function getItem($pk = null)
	{
		$item = parent::getItem($pk);

		// TODO: associations
		// Load associated {{ pageName|lower }} items
		$assoc = Associations::isEnabled();

		if ($assoc)
		{
			$item->associations = [];

			if ($item->id != null)
			{
				// todo: not {{ pageName|lower }} but the corresponding entity (which can have a different name)!
				$associations = Associations::getAssociations('com_{{ componentName|lower }}', '#__{{ componentName|lower }}_{{ pageName|lower }}', 'com_{{ componentName|lower }}.item', $item->id, 'id', null);

				foreach ($associations as $tag => $association)
				{
					$item->associations[$tag] = $association->id;
				}
			}
		}

		// TODO: tags --- N.B: tags is a protected property...
		// Load item tags
		/*if (!empty($item->id))
		{
			$item->tags = new TagsHelper;
			$item->tags->getTagIds($item->id, 'com_{{ componentName|lower }}.{{ pageName|lower }}');
		}*/

		return $item;
	}

}